/*##########################################################################
# 동일한 문자열 변수를 두변수에 대입한다. 단 str2는 객체로 선언한다.
############################################################################*/
const str1 = '자바스크립트 200제';
const str2 = new String('자바스크립트 200제');


/*##########################################################################
# typeof는 변수에 할당된 값에 대하나 자료향 정보를 문자열로 반환한다.
############################################################################*/
console.log(typeof str1); //문자열 반환 ('String')
console.log(typeof str2); //객체 반환(object)

console.log(str1 === '자바스크립트 200제'); //원시자료형 이므로 문자열이 같은지 확인하고 true를 반환
console.log(str2 === new String('자바스크립트 200제')); // str2는 객체로 선언되어 값이아닌 주소정보를 참조하므로 false반환


/*##########################################################################
# valueOf 메소드는 String 내장객체에 정의된 메소드로 객체의 원시형 값. 문자열을 반환하는 메소드이다.
# 이를통해 원시자료형인 str1도 String 내장객체가 사용하는 메소드를 사용할 수 있다는 것을 알 수 있다.
############################################################################*/
console.log(str1.valueOf());
console.log(str2.valueOf());

/*##########################################################################
# 자바스크립트 에서는 원시 자료형이 각 성격에 맞게 표준 내장 객체로 자동으로 래핑된다.
# 즉 문자열로 작성된 값이 String 객체로 래핑된다는 의미이다. 자료형을 확인하면,
# 다른것으로 구분되지만, 원시 자료형 값이지만 표준 내장 객체로 래핑된에 따라 내장 객체에서
# 제공하는 메소드나 속성을 가져다 사용할 수 있다.
############################################################################*/


<!--자바스크립트의 표준내장객체의 종류-->
/*##########################################################################
# Object : 다른표준 내장 객체의 기본이 되는 일반객체
# Number : 숫자형을 감싼 객체. 숫자형과 관련된 함수와 속성을 가지고 있다.
# String : 문자형을 감싼 객체 문자형을 조작하거나 특정 문자열을 찾고 추출하는 등의 메소드와 속성을 지님
# Array : 모든 배열을 Array.prototype을 상속 받는다. Array객체는 리스트처럼 배열 역할을 지님
# Math, Date
# Json : javascript object notation Json을 다른자료형으로 변환하거나, 다시 Json으로 변환하는 등의 메소드를 지님
# RegExp : 정규표현식은 특정 문자열 처리를 위해 사용하는 문자열 패턴 정의를 의미
# Map : Es6부터 표준으로 추가 키의 중복성을 허용하지 않는다. 데이터를 iterator로순회
# Set : Es6부터 표준으로 추가 값으로만 이루어지 데이터 객체형 배열과 비슷해 보이나 메소드 구성이다르고 iterator로 순회
        값의 중복성을 허용하지 않음
############################################################################*/