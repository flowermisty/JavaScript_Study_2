/**
 * @section into 설명
 *                  - Array 객체의 메소드 reduce는 배열 요소를 순환하면서, 정의된 callback 함수에
 *                    의해 단일 값으로 누적시킬 수 있다.
 *
 * @explain reduce 메소드의 형태는 인자로 callback 함수와 초기값을 받는다. 첫 번째 callback함수는 기존
 *          다른 메소드와 달리 여러 매개변수를 정의한다. 최대 4개까지 매개변수를 받고, 첫 번째 누적된 값과
 *          현재 요소 값은 필수이다. reduce 메소드가 처음에 실행할 때, 누적 된 값은 두번째 인자(초기값)를
 *          할당 받는다. 이후에는 배열 순환이 끝날 때까지 callback 함수에서 반환된 값으로 재할당 된다.
 *
 *
 * @example         배열.reduce((누적된값, 현재요소 값, 현재 인덱스, 원본배열) => {
 *                      return 누적된 값으로 반환되는 값;
 *                  }, 초기값);
 *
 */

<!-- 숫자형 값이 나열된 배열 리터럴을 numArr 변수에 대입한다. -->
const numArr=[1, 2, 3, 4, 5];

/*reduce의 callback 함수 매개변수로, 첫 번째 acc(누적된값)과 el(현재 요소값)을 정의한다.
매개 변수로 전달된 acc와 el를 합산하여, callback 함수 결과값으로 반환한다. 이렇게 반환된
값은 reduce로 순환된 다음 요소 차례에서 acc로 할당되어 전달된다. 즉 리터으로 반환된 값은
다음 배열 요소의 acc이 된다는 의미이다. 또한 배열의 모든 요소들을 순환하고 난 마지막 반환 값이
바로 reduce 메소드의 결과 값이 된다.*/


/* 초기 값으로 0을 대입한다. 이 초기값은 첫 번째 요소에서는 acc로 대입된다. 따라서
배열의 각 요소를 순환하면 초기값 0부터 각 요소의 값들을 합산하게 되었을 때 0+1,1+2,3+3,6+4,10+5
와 같이 진행된다.*/
const result = numArr.reduce((acc, el) =>{
    return acc + el
}, 0);

console.log(result);